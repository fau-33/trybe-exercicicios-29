// Elabore alguns c√≥digos e imprima o resultado no console usando o console.log, um para cada opera√ß√£o aritm√©tica b√°sica. Seu c√≥digo deve ter duas constantes, a e b, definidas no come√ßo com os valores que ser√£o operados. Escreva c√≥digos para:
/* Adi√ß√£o (a + b)
Subtra√ß√£o (a - b)
Multiplica√ß√£o (a * b)
Divis√£o (a / b)
M√≥dulo (a % b) */

//const a = 1000;
//const b = 100;

/* console.log(a + b);
console.log(a - b);
console.log(a * b);
console.log(a * b);
console.log(a % b); */

// Utilize if/else para escrever um c√≥digo que retorne o maior de dois n√∫meros. Defina, no come√ßo do seu c√≥digo, duas constantes com os valores que ser√£o comparados.
//const numero1 = 100;
//const numero2 = 200;

/* if (numero1 > numero2) {
  console.log("O " + numero1 + " √© o maior");
}else {
  console.log("O " + numero2 + " √© o maior");
} */

// Utilize if/else para escrever um c√≥digo que retorne o maior de tr√™s n√∫meros. Defina, no come√ßo do seu c√≥digo, tr√™s constantes com os valores que ser√£o comparados.
//const number1 = 10;
//const number2 = 900;
//const number3 = 10000;

/* if (number1 > number2 && number1 > number3) {
  console.log("O " + number1 + " √© o maior");
} else if(number2 > number1 && number2 > number3) {
  console.log("O " + number2 + " √© o maior");
} else if(number3 > number1 && number3 > number2) {
  console.log("O " + number3 + " √© o maior");
} */

// Utilize if/else para escrever um c√≥digo que, dado um valor recebido como par√¢metro, retorne ‚Äúpositive‚Äù se esse valor for positivo, ‚Äúnegative‚Äù se for negativo, e caso n√£o seja nem positivo e nem negativo retorne ‚Äúzero‚Äù.

/* const number = 22;

if (number > 0) {
  console.log("Positivo");
} else if (number < 0) {
  console.log("Negativo");
} else {
  console.log("Zero");
}
 */

// üöÄ Utilize if/else para escrever um c√≥digo que defina tr√™s constantes com os valores dos tr√™s √¢ngulos internos de um tri√¢ngulo. Retorne true se os √¢ngulos representarem os √¢ngulos de um tri√¢ngulo e false, caso contr√°rio. Se algum √¢ngulo for inv√°lido, voc√™ deve retornar uma mensagem de erro.
//Para os √¢ngulos serem de um tri√¢ngulo v√°lido, a soma dos tr√™s deve ser 180 graus.

//Um √¢ngulo ser√° considerado inv√°lido se n√£o tiver um valor positivo.
/* const angulo1 = 100;
const angulo2 = 50;
const angulo3 = 30;
const totalAngulos = angulo1 + angulo2 + angulo3;
const totalAngulosPositivos = angulo1 > 0 && angulo2 > 0 && angulo3 > 0;

if (totalAngulosPositivos) {
  if (totalAngulos === 180) {
    console.log("True");
  } else {
    console.log("False");
  }
} else {
  console.log("Erro: √¢ngulo inv√°lido!");
} */


// Utilize switch/case para escrever um c√≥digo que receba o nome de uma pe√ßa de xadrez e retorne os movimentos que ela faz.
//Como desafio, escreva um c√≥digo para funcionar tanto se receber o nome de uma pe√ßa com letras mai√∫sculas quanto com letras min√∫sculas, sem aumentar a quantidade de condicionais.

//Como dica, voc√™ pode pesquisar uma fun√ß√£o que faz uma string ficar com todas as letras min√∫sculas (lower case).

//Se a pe√ßa passada for inv√°lida, o c√≥digo deve retornar uma mensagem de erro.

//Exemplo: bishop (bispo) -> diagonals (diagonais)

const pecaTabuleiro = "torre";

switch (pecaTabuleiro.toLowerCase()) {
  case 'rei':
    console.log("Rei-> Uma casa apenas para qualquer dire√ß√£o.");
    break;
  case 'bispo':
    console.log("Bispo-> Diagonal.");
    break;
  case 'rainha':
    console.log("Rainha-> Diagonal, horizontal e vertical.");
    break;
  case 'cavalo':
    console.log("Cavalo -> 'L' pode pular sobre as pe√ßas.");
    break;
  case 'torre':
    console.log("Torre -> Horizontal e vertical.");
    break;
  case 'peao':
    console.log("Pe√£o -> Apenas uma casa para frente, no primeiro movimento podem ser duas casas.");
    break;
  default:
    console.log("Pe√ßa inv√°lida!");
    break;    
}

